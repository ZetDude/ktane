from core.grid import Grid
from finder.a_star import AStarFinder

matrixes = [
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 1, 2, 0, 2, 1, 2,],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,],
        [0, 2, 1, 2, 1, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,],
        [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 1, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,],
        [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2,],
        [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1,],
        [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 0, 2,],
        [0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1,],
        [0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 1, 2, 1, 2, 0, 2, 0, 2, 1, 2,],
        [0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,],
        [0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2,],
        [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,],
        [0, 2, 1, 2, 0, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,],
        [0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2,],
        [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,],
        [0, 2, 0, 2, 1, 2, 0, 2, 0, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,],
        [0, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 1, 2, 0, 2, 1, 2, 1, 2, 1, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 1, 2,],
        [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2,],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,],
        [0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,],
        [0, 2, 1, 2, 1, 2, 0, 2, 1, 2, 0, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,],
        [0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,],
        [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,],
        [0, 2, 0, 2, 1, 2, 1, 2, 0, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1,],
        [0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1,],
        [0, 2, 1, 2, 0, 2, 0, 2, 0, 2, 1, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,],
        [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 0, 2,],
        [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,],
        [0, 2, 1, 2, 0, 2, 0, 2, 0, 2, 1, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,],
        [0, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 1, 2, 1, 2, 1, 2, 0, 2, 1, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,],
        [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2,],
        [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,],
        [0, 2, 1, 2, 0, 2, 1, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,],
        [0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 0, 2, 1, 2, 1, 2, 0, 2, 1, 2,],
        [0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1,],
        [0, 2, 1, 2, 1, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,],
        [0, 2, 0, 2, 1, 2, 0, 2, 1, 2, 1, 2,],
        [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,],
        [0, 2, 0, 2, 0, 2, 1, 2, 1, 2, 1, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,],
        ],
    [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
        [0, 2, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2,],
        [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1,],
        [0, 2, 0, 2, 0, 2, 1, 2, 0, 2, 0, 2,],
        [0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1,],
        [0, 2, 1, 2, 1, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,],
        [0, 2, 0, 2, 0, 2, 1, 2, 0, 2, 1, 2,],
        [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,],
        [0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2,],
        [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,],
        [0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1, 2,],
        ],
    ]

def get_path(matrix_id, s, e):
    grid = Grid(matrix=matrixes[matrix_id])

    s = [x*2-1 for x in s]
    e = [x*2-1 for x in e]

    start = grid.node(*s)
    end = grid.node(*e)

    finder = AStarFinder(diagonal_movement=2)
    path, runs = finder.find_path(start, end, grid)

    #print('operations:', runs, 'path length:', len(path))
    rep = grid.grid_str(path=path, start=start, end=end)
    path2 = [j for i, j in enumerate(path+[e]) if i % 2 == 0]
    #print(path2)
    path3 = []
    #print(s)
    for i, node in enumerate(path2):
        path2[i] = [int((path2[i][0]+1)/2), int((path2[i][1]+1)/2)]
        if i == 0:
            continue
        #print(path2[i-1])
        #print(path2[i])
        path3.append([path2[i][0] - path2[i-1][0], path2[i][1] - path2[i-1][1]])
        #print(i)
        #print(path3)

    #print(path2)
    #print(path3)
    for i, node in enumerate(path3):
        if node == [1, 0]:
            path3[i] = "R"
        elif node == [-1, 0]:
            path3[i] = "L"
        elif node == [0, 1]:
            path3[i] = "D"
        elif node == [0, -1]:
            path3[i] = "U"
        else:
            path3[i] = "X"
    #print(path3)
    #print(" ".join(path3))
    return (" ".join(path3), rep)


    
